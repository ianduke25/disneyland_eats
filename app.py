import streamlit as st
import pandas as pd
import requests
from io import StringIO
import json
from datetime import datetime
from collections import Counter
import urllib.parse

# Page config
st.set_page_config(page_title="Disney Food Finder", layout="wide")

# GitHub configuration
GITHUB_REPO = "ianduke25/disneyland_eats"  # ✅ Updated repo
CSV_FILE_PATH = "disney_food_data.csv"
RAW_FILE_URL = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/{CSV_FILE_PATH}"
ISSUES_URL = f"https://api.github.com/repos/{GITHUB_REPO}/issues"
CREATE_ISSUE_URL = f"https://github.com/{GITHUB_REPO}/issues/new"

@st.cache_data(ttl=300)
def load_base_data_from_github():
    try:
        response = requests.get(RAW_FILE_URL)
        response.raise_for_status()
        csv_data = StringIO(response.text)
        df = pd.read_csv(csv_data)
        return df
    except Exception as e:
        st.error(f"Error loading data from GitHub: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=120)
def load_community_tried_from_issues():
    try:
        params = {
            'labels': 'tried',
            'state': 'all',
            'per_page': 100
        }
        response = requests.get(ISSUES_URL, params=params)
        response.raise_for_status()
        issues = response.json()
        tried_items = []
        for issue in issues:
            title = issue['title']
            if title.startswith('[TRIED]'):
                food_name = title.replace('[TRIED]', '').strip()
                tried_items.append({
                    'food_name': food_name,
                    'user': issue['user']['login'],
                    'date': issue['created_at'][:10],
                    'url': issue['html_url']
                })
        return tried_items
    except Exception as e:
        st.warning(f"Could not load community data: {e}")
        return []

def create_tried_issue_url(food_name, location, price):
    title = f"[TRIED] {food_name}"
    body = f"""I tried **{food_name}** at {location}!

**Details:**
- 📍 Location: {location}
- 💰 Price: ${price:.2f}
- 📅 Date tried: {datetime.now().strftime('%Y-%m-%d')}

**My rating:** ⭐⭐⭐⭐⭐ (edit this!)

**Notes:** 
(Add your thoughts here - was it worth it? Would you recommend it?)

---
*This was automatically generated by the Disney Food Tracker app*"""
    params = {
        'title': title,
        'body': body,
        'labels': 'tried'
    }
    query_string = urllib.parse.urlencode(params)
    return f"{CREATE_ISSUE_URL}?{query_string}"

# Initialize session state
if 'tried_items' not in st.session_state:
    st.session_state.tried_items = set()

# Load data
df = load_base_data_from_github()
community_tried = load_community_tried_from_issues()

if df.empty:
    st.error("Could not load data from GitHub. Please check the repository URL.")
    st.stop()

community_food_counts = Counter([item['food_name'] for item in community_tried])
df['Community_Tried_Count'] = df['Food'].map(community_food_counts).fillna(0).astype(int)
df['Personal_Tried'] = df.index.isin(st.session_state.tried_items)

# Stats
total_items = len(df)
personal_tried = df['Personal_Tried'].sum()
community_items = len(community_food_counts)

col1, col2, col3, col4 = st.columns(4)
with col1: st.metric("Total Items", total_items)
with col2: st.metric("You've Tried", int(personal_tried))
with col3: st.metric("Community Tried", community_items)
with col4: st.metric("Total Reports", len(community_tried))

st.markdown("---")

# Park selection
page = st.radio("Select Park", ["Disneyland", "California Adventure"])
filtered_df = df[df['Park'].str.contains(page, case=False, na=False)]

areas = sorted(filtered_df['Area'].dropna().unique())
priorities = sorted(filtered_df['Priority'].unique())

with st.expander("🎯 Filters and Sorting", expanded=False):
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_area = st.selectbox("Area", ["All"] + list(areas))
    with col2:
        selected_priority = st.selectbox("Priority", ["All"] + [str(p) for p in priorities])
    with col3:
        sort_by = st.selectbox("Sort by", ["Price", "Community Popularity", "Priority"])

if selected_area != "All":
    filtered_df = filtered_df[filtered_df['Area'] == selected_area]
if selected_priority != "All":
    filtered_df = filtered_df[filtered_df['Priority'] == int(selected_priority)]

if sort_by == "Price":
    filtered_df = filtered_df.sort_values(by="Price")
elif sort_by == "Community Popularity":
    filtered_df = filtered_df.sort_values(by="Community_Tried_Count", ascending=False)
elif sort_by == "Priority":
    filtered_df = filtered_df.sort_values(by="Priority")

st.title(f"🍽️ {page} Eats")

if community_tried:
    st.subheader("🌟 Community Highlights")
    most_popular = max(community_food_counts.items(), key=lambda x: x[1])
    st.info(f"Most tried item: **{most_popular[0]}** ({most_popular[1]} people tried it!)")

for idx, row in filtered_df.iterrows():
    with st.container():
        col1, col2 = st.columns([4, 1])
        with col1:
            title = row['Food'] or '*Unnamed Item*'
            if row['Personal_Tried']:
                st.markdown(f"### {title} ✅ **You tried this!**")
            else:
                st.markdown(f"### {title}")
            if row['Community_Tried_Count'] > 0:
                st.markdown(f"👥 **{row['Community_Tried_Count']} people** from the community tried this!")
            st.markdown(f"- 💵 **Price**: ${row['Price']:.2f}")
            st.markdown(f"- 📍 **Location**: {row['Location'] or '*Not listed*'}")
            st.markdown(f"- 🗺️ **Area**: {row['Area'] or '*Not listed*'}")
            st.markdown(f"- 🔢 **Priority**: {row['Priority']}")
        with col2:
            if not row['Personal_Tried']:
                if st.button("Mark as Tried", key=f"personal_{idx}", type="primary"):
                    st.session_state.tried_items.add(idx)
                    st.success(f"Marked '{row['Food']}' as tried!")
                    st.rerun()
            else:
                if st.button("Unmark", key=f"unpersonal_{idx}", type="secondary"):
                    st.session_state.tried_items.discard(idx)
                    st.rerun()
            issue_url = create_tried_issue_url(row['Food'], row['Location'], row['Price'])
            st.markdown(f"[🗣️ Tell Community]({issue_url})")
        st.markdown("---")

# Sidebar
st.sidebar.markdown("### 🌟 Recent Community Activity")
if community_tried:
    recent_items = sorted(community_tried, key=lambda x: x['date'], reverse=True)[:5]
    for item in recent_items:
        st.sidebar.markdown(f"**{item['food_name']}**")
        st.sidebar.caption(f"Tried by @{item['user']} on {item['date']}")
else:
    st.sidebar.info("No community reports yet. Be the first!")

st.sidebar.markdown("---")
st.sidebar.markdown(f"""
### 📊 How This Works

**Personal Tracking:**
- Mark items as tried for yourself
- Data saved in your browser session
- Private to you

**Community Sharing:**
- Click "Tell Community" to share your experience
- Creates a GitHub issue with your review
- Helps others discover great food!

**Data Sources:**
- Food list: GitHub repository CSV
- Community reports: GitHub issues with 'tried' label

[View Repository](https://github.com/{GITHUB_REPO})
""")

if st.sidebar.button("🗑️ Reset Personal Progress"):
    st.session_state.tried_items.clear()
    st.sidebar.success("Personal progress reset!")
    st.rerun()
